{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\froman\fcharset0 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 public class Practical_4 \{\
\
    public static String toXXString(String number, String type) \{\
        type = type.toLowerCase();\
\
        int base;\
\
        if (type.startsWith("hexadecimal")) \{\
            base = 16;\
        \} else if (type.startsWith("octal")) \{\
            base = 8;\
        \} else if (type.startsWith("binary")) \{\
            base = 2;\
        \} else \{\
            return "Enter a valid choice!";\
        \}\
\
        int num = Integer.parseInt(number);\
        StringBuilder result = new StringBuilder();\
\
        while (num > 0) \{\
            int remainder = num % base;\
            if (remainder >= 10) \{\
                result.append((char) ('A' + (remainder - 10)));\
            \} else \{\
                result.append(remainder);\
            \}\
            num /= base;\
        \}\
\
        result.reverse();\
\
        if (base == 16) \{\
            return "0X" + result.toString();\
        \} else if (base == 8) \{\
            return "0" + result.toString();\
        \} else \{\
            return "0B" + result.toString();\
        \}\
    \}\
\
    public byte getByte(int number) \{\
        byte ans;\
\
        int temp = number / 128;\
        if (temp % 2 == 0) \{\
            ans = (byte) (number % 128);\
        \} else \{\
            ans = (byte) (-128 + (number % 128));\
        \}\
\
        return ans;\
    \}\
\
    public short getShort(int number) \{\
        short ans;\
        int temp = number / 32767;\
        if (temp % 2 == 0) \{\
            ans = (short) (number % 32767);\
        \} else \{\
            ans = (short) (-32768 + (number % 32767));\
        \}\
        return ans;\
    \}\
\
    public static int getByte(int number, String type) \{\
        if (type.equalsIgnoreCase("Byte")) \{\
            byte ans;\
            int temp = number / 128;\
\
            if (temp % 2 == 0) \{\
                ans = (byte) (number % 128);\
            \} else \{\
                ans = (byte) (-128 + (number % 128));\
            \}\
            return ans;\
        \} else if (type.equalsIgnoreCase("Short")) \{\
            short ans;\
            int temp = number / 32768;\
\
            if (temp % 2 == 0) \{\
                ans = (short) (number % 32768);\
            \} else \{\
                ans = (short) (-32768 + (number % 32768));\
            \}\
            return ans;\
        \} else \{\
            return 0;\
        \}\
    \}\
\}\
\
Practical_4 obj = new Practical_4(); //
\f1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create an object of the 
\f2\fs26 Practical_4
\f1\fs24  class and access its methods.\
//
\f3\b \strokec2 Test the Methods\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf0 \strokec2 //toXXString\
System.out.println(Practical_4.toXXString("240", "binary")); // "0B11110000"\
System.out.println(Practical_4.toXXString("240", "hexadecimal")); // "0XF0"\
System.out.println(Practical_4.toXXString("240", "octal")); // "0360"\
\
\
//getByte\
System.out.println(obj.getByte(212)); // Prints: -44\
System.out.println(obj.getByte(128)); // Prints: -128\
\
//getShort\
System.out.println(obj.getShort(33000)); // Prints: 2592\
System.out.println(obj.getShort(32768)); // Prints: -32768\
\
//getByte with Type\
System.out.println(Practical_4.getByte(255, "Byte")); // Prints: -1\
System.out.println(Practical_4.getByte(33000, "Short")); // Prints: 2592\
System.out.println(Practical_4.getByte(33000, "Int")); // Prints: 0\
\

\f0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
}